#!/usr/bin/env perl

=head1 NAME

get_sequence_type

=head1 SYNOPSIS

get_sequence_type - Given a Fasta file (assembly) lookup the MLST data and work out the sequence type

=head1 DESCRIPTION

Given a Fasta file and a Species regex, lookup the relevant MLST data and output the sequence type to a file

=head1 CONTACT

path-help@sanger.ac.uk

=head1 METHODS

=cut
package SequenceType::Main;

BEGIN { unshift(@INC, './modules') }
use Moose;
use Getopt::Long;
use Cwd;
use MLST::ProcessFasta;
use MLST::Spreadsheet::File;

my ($species, $fasta_files, $output_directory, $available_databases, $base_directory, $makeblastdb_exec, $blastn_exec, $help);

GetOptions ('s|species=s'           => \$species,
            'o|output_directory=s'  => \$output_directory,
            'c|fasta_files'         => \$fasta_files,
            'a|available_databases' => \$available_databases,
            'b|mlst_base_directory' => \$base_directory,
            'm|makeblastdb_exec'    => \$makeblastdb_exec,
            'n|blastn_exec'         => \$blastn_exec,
            'h|help'                => \$help,
);

(  (defined($species)) && (@ARGV > 0) && ! $help)or die <<USAGE;
Usage: $0 [options]

# Basic usage, sequence type result written to my_assembly.fa.st
get_sequence_type -s "Clostridium difficile" my_assembly.fa

# Multiple fasta files 
get_sequence_type -s "Clostridium difficile" myfasta.fa anotherfasta.fa yetanother.fa

# output a fasta file with the concatinated alleles and unknown sequences
get_sequence_type -s "Clostridium difficile" -c  my_assembly.fa 

# Specify an output directory 
get_sequence_type  -s "Clostridium difficile" -o /path/to/results my_assembly.fa

# list all available MLST databases
get_sequence_type -a

# This help message
get_sequence_type -h

USAGE
;

$base_directory ||= '/lustre/scratch108/pathogen/pathpipe/mlst';
$makeblastdb_exec ||= '/software/pubseq/bin/ncbi-blast-2.2.25+/bin/makeblastdb';
$blastn_exec  ||= '/software/pubseq/bin/ncbi-blast-2.2.25+/bin/blastn';

$output_directory ||= getcwd;
$fasta_files ||= 0;

# check all fasta files exist first
for my $fastafile (@ARGV)
{
  if(!(-e $fastafile ))
  {
    die "Input file doesnt exist: $fastafile\n";
  }
}

my @spreadsheet_rows;
for my $fastafile (@ARGV)
{
  my $fasta_sequence_type_results = MLST::ProcessFasta->new(
    'species'            => $species,
    'base_directory'     => $base_directory,
    'fasta_file'         => $fastafile,
    'makeblastdb_exec'   => $makeblastdb_exec,
    'blastn_exec'        => $blastn_exec,
    'output_directory'   => $output_directory,
    'output_fasta_files' => $fasta_files
  );
  push(@spreadsheet_rows, $fasta_sequence_type_results->_spreadsheet_row_obj);
}

my $spreadsheet = MLST::Spreadsheet::File->new(
  spreadsheet_rows => \@spreadsheet_rows,
  output_directory => $output_directory,
  spreadsheet_basename => 'mlst_results'
);
$spreadsheet->create();

# list all available MLST databases
